// IMPORTS
// Use
@use '@relume-demo/styles/theming/borders' as border;
@use '@relume-demo/styles/theming/colors' as color;
@use '@relume-demo/styles/ui/animations' as anim;
@use '@relume-demo/styles/ui/sizes' as size;
@use '@relume-demo/styles/utils/mixins' as mixin;

// MIXINS
@mixin loader-color-style-scoped( $background-color ) {
  // Children...
  @include mixin.child-styles( loader, dot-inner ) {
    background: $background-color;
  }

  @include mixin.child-styles( loader, circle-line ) {
    stroke: $background-color;
  }
  
  // Type..
  @include mixin.variant-styles( loader, type, dots ) {
    @include mixin.child-styles( loader, dot ) {
      background: $background-color;
    }
  }
}

// STYLES
.loader {
  // Styles
  display: grid;
  grid-auto-flow: column;
  align-items: center;
  justify-content: center;
  
  // Children
  &__dot {
    // Styles
    position: relative;
    
    // Children
    &-inner {
      width: 100%;
      position: absolute;
      left: 0;
      border-radius: border.radius( sm );
    }
  }
  
  &__circle {
    &-svg {
      width: 100%;
      height: 100%;
      object-fit: contain;
      transform-origin: center center;
    }
    
    &-line {
      fill: none;
      stroke-linecap: round;
    }
  }
  
  // Size...
  &--size {
    &-sm {
      gap: size.rem(2);
    }
    
    &-md {
      gap: size.rem(4);
    }
    
    &-lg {
      gap: size.rem(8);
    }
  }
  
  // Color...
  &--color {
    &-primary {
      @include loader-color-style-scoped( color.get( primary-500 ) );
    }
    
    &-secondary {
      @include loader-color-style-scoped( color.get( secondary-800 ) );
    }
    
    &-invert {
      @include loader-color-style-scoped( color.get( invert-0 ) );
    }
    
    &-base {
      @include loader-color-style-scoped( color.get( base-0 ) );
    }
    
    &-black {
      @include loader-color-style-scoped( color.get( neutral-black ) );
    }
    
    &-white {
      @include loader-color-style-scoped( color.get( neutral-white ) );
    }
    
    &-grey {
      @include loader-color-style-scoped( color.get( grey-500 ) );
    }
    
    &-info {
      @include loader-color-style-scoped( color.get( info-500 ) );
    }
    
    &-success {
      @include loader-color-style-scoped( color.get( success-500 ) );
    }
    
    &-warning {
      @include loader-color-style-scoped( color.get( warning-500 ) );
    }
    
    &-danger {
      @include loader-color-style-scoped( color.get( danger-500 ) );
    }
  }
  
  // Type
  &--type {
    &-dots {
      @include mixin.child-styles( loader, dot ) {
        // Mixins
        @include mixin.animation( anim.$bounce 2s infinite) ;
        
        // Styles
        border-radius: border.radius( sm );
        
        // Selectors
        &:nth-child( 2 ) {
          animation-delay: .1s;
        }
        
        &:nth-child( 3 ) {
          animation-delay: .2s;
        }
      }
    }
  }
}
